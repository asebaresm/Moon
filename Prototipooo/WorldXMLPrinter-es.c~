/** 
  *  WorldXMLPrinter.c
  *  
  *  Este programa prueba el uso de la biblioteca Lectorxml. Se han incluido
  *  dentro del programa  * todas * las funciones necesarios para la demostración.
  *  En un caso real, estas funciones irían distribuidas en los distintos
  *  módulos (Mundo, Espacio, objo y Jugador).
  * 
  *  Se incluyen con el ejemplo los .h de los módulos anteriores. Se han definido
  *  * únicamente * los prototipos de las funciones que requiere Lectorxml
  * 
  *  Se incluye en la distribución un archivo Makefile que facilita las tareas
  *  de compilación y construcción del ejemplo.
  */

#include <stdio.h>
#include "Consts.h"
#include "World.h"
#include "Space.h"
#include "Object.h"
#include "Player.h"
#include "WorldXMLReader.h"

/**  Space  */
Space *world_add_space(World *world, Id id)
{
	printf("Nuevo espacio Id:%ld\n", id);
	return NULL;
}

STATUS space_set_description(Space *space, char *s)
{
	if (s != NULL)
		printf("\tNueva desc. espacio:%s\n", s);
	return OK; 
}

STATUS space_set_description_inspect(Space *space, char *s)
{
	if (s != NULL)
		printf("\tNueva desc. examinar espacio:%s\n", s);
	return OK; 
}

STATUS space_set_description_graphical(Space *space, char *s) 
{
	if (s != NULL)
		printf("\tNueva desc. grafica espacio:%s\n", s);
	return OK; 
}

STATUS space_add_link_north(Space *space, Id id)
{
	printf("\tNorte Id:%ld\n", id);
	return OK; 
}

STATUS space_add_link_south(Space *space, Id id)
{
	printf("\tSur Id:%ld\n", id);
	return OK; 
}

STATUS space_add_link_east(Space *space, Id id)
{
	printf("\tEste Id:%ld\n", id);
	return OK; 
}

STATUS space_add_link_west(Space *space, Id id)
{
	printf("\tOeste Id:%ld\n", id);
	return OK; 
}

STATUS space_add_link_up(Space *space, Id id)
{
	printf("\tArriba Id:%ld\n", id);
	return OK; 
}

STATUS space_add_link_down(Space *space, Id id)
{
	printf("\tAbajo Id:%ld\n", id);
	return OK; 
}

STATUS space_set_light(Space *space, BOOL is_light)
{
	printf("\tIluminacion:%s\n", is_light ? "TRUE" : "FALSE_VALUE");
	return OK; 
}

STATUS space_add_obj(Space *space, Id id) {
	printf("\tIncluye objo:%ld\n", id);
	return OK; 
}
/**  End Space  */

/**  Link  */
Link *world_add_link(World *world, Id id) {
	printf("Nueva union Id:%ld\n", id);
	return NULL;
}

STATUS link_set_openable(Link *link, BOOL is_openable) {
	printf("\tLink es: %s\n", is_openable ? "abrible" : "no abrible");
	return OK;
}

STATUS link_open(Link *link) 
{
	printf("\tLink abierta\n");
	return OK;
}

STATUS link_close(Link *link) 
{
	printf("\tLink cerrada\n");
	return OK;
}

STATUS link_join_spaces(Link *link, Id space_1, Id space_2) 
{
	printf("\tUne %ld-%ld\n", space_1, space_2);
	return OK; 
}
/**  End Link  */

/**  Object  */
Object *world_add_obj(World *world, Id id)
{
	printf("Nuevo objo Id:%ld\n", id);
	return NULL; 
}

STATUS obj_set_name(Object *object, char *s)
{
	if (s != NULL)
		printf("\tNuevo nombre:%s\n", s);
	return OK;
}

STATUS obj_set_description(Object *object, char *s)
{
	if (s != NULL)
		printf("\tNuevo desc.:%s\n", s);
	return OK;
}

STATUS obj_set_description_moved(Object *object, char *s)
{
	if (s != NULL)
		printf("\tNuevo desc. movil:%s\n", s);
	return OK;
}

STATUS obj_set_description_inspect(Object *object, char *s)
{
	if (s != NULL)
		printf("\tNuevo desc. examinar:%s\n", s);
	return OK;
}

STATUS obj_set_description_graphical(Object *object, char *s)
{
	printf("\tNuevo desc. grafica:%s\n", s);
	return OK;
}

STATUS obj_set_movable(Object *object, BOOL is_moveable)
{
	printf("\tMovil:%s\n", is_moveable ? "TRUE" : "FALSE_VALUE");
	return OK; 
}

/* Por defecto los objetos estan visibles. 
   Sólo si se especifica que están ocultos se llama a esta función */
STATUS obj_hide(Object *object) 
{
	printf("\tobjo oculto\n");
	return OK; 
}

STATUS obj_open_link(Object *object, Id id)
{
	printf("\tAbre union:%ld\n", id);
	return OK;
}

STATUS obj_set_lightable(Object *object, BOOL is_lightable)
{
	printf("\tIluminable:%s\n", is_lightable ? "TRUE" : "FALSE_VALUE");
	return OK; 
}

STATUS obj_set_light(Object *object, BOOL is_light)
{
	printf("\tEncendido:%s\n", is_light ? "TRUE" : "FALSE_VALUE");
	return OK; 
}

STATUS obj_add_obj(Object *object, Id id)
{
	printf("\tIncluye objo:%ld\n", id);
	return OK; 
}
/**  End Object  */

/**  Player  */
Player *world_set_player(World *world)
{
	printf("Nuevo jugador\n");
	return NULL;
}

STATUS player_set_location(Player *player, Id id)
{
	printf("\tLocalizacion %ld\n", id);
	return OK;
}

STATUS player_set_max_objects(Player *player, unsigned int nobj)
{
	printf("\tMax-obj. %u\n", nobj);
	return OK;
}

STATUS player_add_obj(Player *player, Id id)
{
	printf("\tIncluye objo:%ld\n", id);
	return OK; 
}
/**  End Player  */

int main(int argc, char *argv[])
{
	if (argc != 2) {
		printf("Uso: %s nombre_fichero.xml\n", argv[0]);
	}
	
	world_load(argv[1], NULL);
	
	return OK;
}
